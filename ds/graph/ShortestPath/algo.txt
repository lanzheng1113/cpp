吴伟明教材Dijkstra算法
/**
 * 最短路径Dijkstra算法
 *
 * 输入邻接矩阵gMatrix表示图
 * 输入start表示起点序号
 *
 * 输出pathMatrix 用布尔变量表示的路径
 * distance表示最短路径的距离
 */
void Graph::shotestPathDij(int start,int** gMatrix,bool**pathMatrix,int*distance) {
	    bool final[vertexNum];
        //初始化到达每个点的最短路径和距离
	   for(int i=0;i<vertexNum;++i) {
		      final[i] = false;	// 表示非终结点
		      for(int j=0;j<vertexNum;j++)
		    	  pathMatrix[i][j] = false;  // 表示无路径
		      distance[i] = gMatrix[start][i];
		      //如果从src可到达i则标记路径
		      if(distance[i] < GraphMatrix::INF) {
		    	    pathMatrix[i][start] = true;
		    	    pathMatrix[i][i] = true;
		      }
	   }
	   distance[start] = 0;
	   final[start] = true;
	   //n-1次迭代求出依次求出最短路径
      for(int i=0;i<vertexNum;++i) {
    	    int minDis=GraphMatrix::INF,min;
    	    //选取距离最小者
           for(int j=0;j < vertexNum;++j) {
        	    if(final[j]) continue;
        	    if(distance[j] < minDis) {
        	    	minDis = distance[j];
        	    	min = j;
        	    }
           }
            final[min] = true;
           //更新剩余的顶点的最短距离
           for(int i=0;i < vertexNum;++i) {
        	   if(final[i]  ||  gMatrix[min][i] == GraphMatrix::INF ) continue;
        	   if(minDis+gMatrix[min][i] < distance[i])  {
        		     distance[i] = minDis+gMatrix[min][i]; // 更新最短路径距离
        		     // 标记路径为从src-min-i
        		     std::copy(pathMatrix[min],pathMatrix[min]+vertexNum,pathMatrix[i]);
        		     pathMatrix[i][i] = true;
        	   }
           }
      }
}