//测试数据
void Graph::unionTest() {
	std::vector<int> root;
	std::vector<int> next;
	std::vector<int> length(6,1);
	for(int i=0;i < 6;++i) {
		root.push_back(i);
		next.push_back(i);
	}
	std::cout<<"\nroot: "<<std::endl;
	std::copy(root.begin(),root.end(),std::ostream_iterator<int>(std::cout,"\t"));
	std::cout<<"\nnext: "<<std::endl;
	std::copy(next.begin(),next.end(),std::ostream_iterator<int>(std::cout,"\t"));
	std::cout<<"\nlength: "<<std::endl;
	std::copy(length.begin(),length.end(),std::ostream_iterator<int>(std::cout,"\t"));
	std::cout<<std::endl;
	unionEdge(root,next,length,0,1);
	unionEdge(root,next,length,4,3);
	std::cout<<"\nroot: "<<std::endl;
	std::copy(root.begin(),root.end(),std::ostream_iterator<int>(std::cout,"\t"));
	std::cout<<"\nnext: "<<std::endl;
	std::copy(next.begin(),next.end(),std::ostream_iterator<int>(std::cout,"\t"));
	std::cout<<"\nlength: "<<std::endl;
	std::copy(length.begin(),length.end(),std::ostream_iterator<int>(std::cout,"\t"));
	std::cout<<std::endl;
	unionEdge(root,next,length,2,3);
	unionEdge(root,next,length,0,5);
	std::cout<<"\nroot: "<<std::endl;
	std::copy(root.begin(),root.end(),std::ostream_iterator<int>(std::cout,"\t"));
	std::cout<<"\nnext: "<<std::endl;
	std::copy(next.begin(),next.end(),std::ostream_iterator<int>(std::cout,"\t"));
	std::cout<<"\nlength: "<<std::endl;
	std::copy(length.begin(),length.end(),std::ostream_iterator<int>(std::cout,"\t"));
	std::cout<<std::endl;
	unionEdge(root,next,length,2,1);
	std::cout<<"\nroot: "<<std::endl;
	std::copy(root.begin(),root.end(),std::ostream_iterator<int>(std::cout,"\t"));
	std::cout<<"\nnext: "<<std::endl;
	std::copy(next.begin(),next.end(),std::ostream_iterator<int>(std::cout,"\t"));
	std::cout<<"\nlength: "<<std::endl;
	std::copy(length.begin(),length.end(),std::ostream_iterator<int>(std::cout,"\t"));
	std::cout<<std::endl;
}

//输出

root: 
0	1	2	3	4	5	
next: 
0	1	2	3	4	5	
length: 
1	1	1	1	1	1	

root: 
0	0	2	4	4	5	
next: 
1	0	2	4	3	5	
length: 
2	1	1	1	2	1	

root: 
0	0	4	4	4	0	
next: 
5	0	3	4	2	1	
length: 
3	1	1	1	3	1	

root: 
4	4	4	4	4	4	
next: 
2	0	3	4	5	1	
length: 
3	1	1	1	6	1	