/*
 * treeprinter.cpp
 *
 *  Created on: 2015年5月21日
 *      Author: wangdq
 */
#include <cstdlib>		   // std::system
#include <queue>
#include <iostream>
#include <fstream>
#include <sstream>
#include "treeprinter.h"

std::string BiTreePrinter::fontColor="black",BiTreePrinter::fillColor="#FFFFFF",
				BiTreePrinter::currentFillColor="red",BiTreePrinter::width="0.5",
				BiTreePrinter::height="0.5",BiTreePrinter::fontsize="16",BiTreePrinter::currentFontColor="black",
				BiTreePrinter::edgeColor="blue",BiTreePrinter::arrowheadType="normal";
long BiTreePrinter::fileCounter = 1;
std::string BiTreePrinter::prefix="BST";
/**
 * 将绑定的BST转换为图片
 * desp为描述字符串
 * pcur指向当前节点
 */
void BiTreePrinter::toPng(const BST *bst,const std::string &desp,const BSTNode* pcur)
{
	if(bst == 0) {
		std::cerr << "Printer not bind to any BST"<<std::endl;
		return;
	}
	if(bst->isEmpty())
		return;
	std::vector<std::string> invisNodeVec;
	std::vector<std::string> visNodeVec;
	std::vector<BSTEdge> edgeVec;
	std::queue<const BSTNode *> nodeQueue;
	nodeQueue.push(bst->getRoot());
	while(!nodeQueue.empty()) {		// 广度优先遍历
	   const BSTNode * current = nodeQueue.front();
	   nodeQueue.pop();
	   if(current->left != 0)
		   nodeQueue.push(current->left);
	   if(current->right != 0)
		   nodeQueue.push(current->right);
	   if(current->left != 0  || current->right != 0)
		   addEdge(invisNodeVec,edgeVec,current);
	}
	writePng(invisNodeVec,edgeVec,desp,pcur);
}
/**
 * 添加结点from相关的边
 */
void BiTreePrinter::addEdge(std::vector<std::string> &invisNodeVec,std::vector<BSTEdge> &edgeVec,const BSTNode* from){
	std::string fromId = from->toString();
	std::string virtualId=std::string("v")+fromId;
	   if(from->left == 0 && from->right == 0)
		   return;
	   invisNodeVec.push_back(virtualId);
	   if(from->left != 0 && from->right != 0) {
		   edgeVec.push_back(BSTEdge(fromId,from->left->toString()));
		   edgeVec.push_back(BSTEdge(fromId,virtualId,false));
		   edgeVec.push_back(BSTEdge(fromId,from->right->toString()));
	   }else if(from->left == 0) {
		   edgeVec.push_back(BSTEdge(fromId,virtualId,false));
		   edgeVec.push_back(BSTEdge(fromId,from->right->toString()));
	   }else {
		   edgeVec.push_back(BSTEdge(fromId,from->left->toString()));
		   edgeVec.push_back(BSTEdge(fromId,virtualId,false));
	   }
}
/**
 * 写入dot文件并转换为png
 * 可以根据需要修改此部分参数
 */
void BiTreePrinter::writePng(std::vector<std::string> &invisNodeVec,std::vector<BSTEdge> &edgeVec,const std::string& desp,const BSTNode* pcur) {
		long count = fileCounter;
		std::string filename = getNextFilename();
		std::ofstream stream(filename.c_str());
	 	// print author and contact info
	 	stream << "/************************************************" <<std::endl
	 			    << "Auto generated by my program which transfer Binary Search Tree to dot file." << std::endl
	 			    << "Author: wangdq "  <<std::endl
					<<  "Time: 2015-05-30" <<std::endl
				    << "CSDN: http://blog.csdn.net/wangdingqiaoit"<<std::endl
					<< "************************************************/" <<std::endl<<std::endl;
	 	// print description
	 	stream << "digraph BST {" << std::endl;
		stream << "\tlabel=\"(" << count <<")\t" <<  desp << "\";"<< "labelloc=b;labeljust=center;"<<std::endl;
		// print settings
	    stream << "\tnodesep=0.35" << std::endl
			        << "\tordering=out" << std::endl
				    << "\tnode[width=" << width << ",height=" <<height << ",fontsize=" << fontsize << ",fixedsize=true,style=\"filled\", fillcolor=\""
				    << fillColor << "\",fontcolor=\"" << fontColor << "\"];" << std::endl
				    << "\tedge[color=\"" << edgeColor << "\", arrowhead=\"" << arrowheadType << "\"];"<< std::endl;
	    // print invisible node
	    stream << "\t/* invisible nodes*/" << std::endl;
	    stream << " \t{ node[style=invis]" << std::endl;
	    for(std::vector<std::string>::iterator it = invisNodeVec.begin(); it != invisNodeVec.end();++it)
	    		stream << "\t\t" << *it << std::endl;
	    stream <<  "\t}" << std::endl;
	    //set current node color
		if(pcur != 0) {
			stream << "\t/* set current node color attributes*/" << std::endl;
			stream <<"\t" << pcur->toString() << "[fillcolor=\"" << currentFillColor << "\",fontcolor=\"" << currentFontColor <<"\"];"<<std::endl;
		}
	    //print edges
	    stream << "\t/* edges*/" << std::endl;
	    for(std::vector<BSTEdge>::iterator it = edgeVec.begin(); it != edgeVec.end();++it)
	    	   stream <<"\t" << (*it).toString() << std::endl;
	    stream <<  "}"<< std::endl;
		stream.close();
		//transfer from dot file to png picture
		std::string cmd("dot -Tpng");
		cmd += " "+filename+" -o"+filename+".png";
		std::system(cmd.c_str());
		std::cout << "tree saved in file: " << filename<< std::endl;
}
/**
 * 获取下一个文件名
 */
std::string  BiTreePrinter::getNextFilename() {
	   const std::string ext = ".dot";
	   std::string filename(prefix);
		std::ostringstream oss;
		oss << fileCounter++;
		filename += oss.str();
		filename += ext;
		return filename;
}
